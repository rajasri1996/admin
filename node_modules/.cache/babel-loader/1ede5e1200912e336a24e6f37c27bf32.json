{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from \"react\";\nimport { Tag } from \"./components/Tag\";\nimport { classSelectors } from \"./utils/selectors\";\n\nvar ReactTagInput = function (_super) {\n  __extends(ReactTagInput, _super);\n\n  function ReactTagInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      input: \"\"\n    };\n    _this.inputRef = React.createRef();\n\n    _this.onInputChange = function (e) {\n      _this.setState({\n        input: e.target.value\n      });\n    };\n\n    _this.onInputKeyDown = function (e) {\n      var input = _this.state.input;\n      var _a = _this.props,\n          validator = _a.validator,\n          removeOnBackspace = _a.removeOnBackspace;\n\n      if (e.keyCode === 13) {\n        e.preventDefault();\n\n        if (input === \"\") {\n          return;\n        }\n\n        var valid = validator !== undefined ? validator(input) : true;\n\n        if (!valid) {\n          return;\n        }\n\n        _this.addTag(input);\n      } else if (removeOnBackspace && (e.keyCode === 8 || e.keyCode === 46)) {\n        if (input !== \"\") {\n          return;\n        }\n\n        _this.removeTag(_this.props.tags.length - 1);\n      }\n    };\n\n    _this.addTag = function (value) {\n      var tags = _this.props.tags.slice();\n\n      tags.push(value);\n\n      _this.props.onChange(tags);\n\n      _this.setState({\n        input: \"\"\n      });\n    };\n\n    _this.removeTag = function (i) {\n      var tags = _this.props.tags.slice();\n\n      tags.splice(i, 1);\n\n      _this.props.onChange(tags);\n    };\n\n    _this.updateTag = function (i, value) {\n      var tags = _this.props.tags.slice();\n\n      tags[i] = value;\n\n      _this.props.onChange(tags);\n    };\n\n    return _this;\n  }\n\n  ReactTagInput.prototype.render = function () {\n    var _this = this;\n\n    var input = this.state.input;\n    var _a = this.props,\n        tags = _a.tags,\n        placeholder = _a.placeholder,\n        maxTags = _a.maxTags,\n        editable = _a.editable,\n        readOnly = _a.readOnly,\n        validator = _a.validator,\n        removeOnBackspace = _a.removeOnBackspace;\n    var maxTagsReached = maxTags !== undefined ? tags.length >= maxTags : false;\n    var isEditable = readOnly ? false : editable || false;\n    var showInput = !readOnly && !maxTagsReached;\n    return React.createElement(\"div\", {\n      className: classSelectors.wrapper\n    }, tags.map(function (tag, i) {\n      return React.createElement(Tag, {\n        key: i,\n        value: tag,\n        index: i,\n        editable: isEditable,\n        readOnly: readOnly || false,\n        inputRef: _this.inputRef,\n        update: _this.updateTag,\n        remove: _this.removeTag,\n        validator: validator,\n        removeOnBackspace: removeOnBackspace\n      });\n    }), showInput && React.createElement(\"input\", {\n      ref: this.inputRef,\n      value: input,\n      className: classSelectors.input,\n      placeholder: placeholder || \"Type and press enter\",\n      onChange: this.onInputChange,\n      onKeyDown: this.onInputKeyDown\n    }));\n  };\n\n  return ReactTagInput;\n}(React.Component);\n\nexport default ReactTagInput;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,kBAAlB;AACA,SAAQC,cAAR,QAA6B,mBAA7B;;AAmBA;AAA2CC;;AAA3C;AAAA;;AAEEC,kBAAQ;AAAEC,WAAK,EAAE;AAAT,KAAR;AAGAD,qBAA8CJ,KAAK,CAACM,SAAN,EAA9C;;AAEAF,0BAAgB,UAACG,CAAD,EAAuC;AACrDH,WAAI,CAACI,QAAL,CAAc;AAAEH,aAAK,EAAEE,CAAC,CAACE,MAAF,CAASC;AAAlB,OAAd;AACD,KAFD;;AAIAN,2BAAiB,UAACG,CAAD,EAAyC;AAEhD;AACF;AAAA,UAAEI,wBAAF;AAAA,UAAaC,wCAAb;;AAGN,UAAIL,CAAC,CAACM,OAAF,KAAc,EAAlB,EAAsB;AAGpBN,SAAC,CAACO,cAAF;;AAGA,YAAIT,KAAK,KAAK,EAAd,EAAkB;AAAE;AAAS;;AAG7B,YAAMU,KAAK,GAAGJ,SAAS,KAAKK,SAAd,GAA0BL,SAAS,CAACN,KAAD,CAAnC,GAA6C,IAA3D;;AACA,YAAI,CAACU,KAAL,EAAY;AACV;AACD;;AAGDX,aAAI,CAACa,MAAL,CAAYZ,KAAZ;AAED,OAjBD,MAmBK,IAAIO,iBAAiB,KAAKL,CAAC,CAACM,OAAF,KAAc,CAAd,IAAmBN,CAAC,CAACM,OAAF,KAAc,EAAtC,CAArB,EAAgE;AAGnE,YAAIR,KAAK,KAAK,EAAd,EAAkB;AAChB;AACD;;AAGDD,aAAI,CAACc,SAAL,CAAed,KAAI,CAACe,KAAL,CAAWC,IAAX,CAAgBC,MAAhB,GAAyB,CAAxC;AAED;AAEF,KArCD;;AAuCAjB,mBAAS,UAACM,KAAD,EAAc;AACrB,UAAMU,IAAI,GAAQhB,KAAI,CAACe,KAAL,CAAWC,IAAX,CAAeE,KAAf,EAAlB;;AACAF,UAAI,CAACG,IAAL,CAAUb,KAAV;;AACAN,WAAI,CAACe,KAAL,CAAWK,QAAX,CAAoBJ,IAApB;;AACAhB,WAAI,CAACI,QAAL,CAAc;AAAEH,aAAK,EAAE;AAAT,OAAd;AACD,KALD;;AAOAD,sBAAY,UAACqB,CAAD,EAAU;AACpB,UAAML,IAAI,GAAQhB,KAAI,CAACe,KAAL,CAAWC,IAAX,CAAeE,KAAf,EAAlB;;AACAF,UAAI,CAACM,MAAL,CAAYD,CAAZ,EAAe,CAAf;;AACArB,WAAI,CAACe,KAAL,CAAWK,QAAX,CAAoBJ,IAApB;AACD,KAJD;;AAMAhB,sBAAY,UAACqB,CAAD,EAAYf,KAAZ,EAAyB;AACnC,UAAMU,IAAI,GAAOhB,KAAI,CAACe,KAAL,CAAWC,IAAX,CAAeE,KAAf,EAAjB;;AACAF,UAAI,CAACK,CAAD,CAAJ,GAAUf,KAAV;;AACAN,WAAI,CAACe,KAAL,CAAWK,QAAX,CAAoBJ,IAApB;AACD,KAJD;;;AAiDD;;AA3CCO;AAAA;;AAEU;AAEF;AAAA,QAAEP,cAAF;AAAA,QAAQQ,4BAAR;AAAA,QAAqBC,oBAArB;AAAA,QAA8BC,sBAA9B;AAAA,QAAwCC,sBAAxC;AAAA,QAAkDpB,wBAAlD;AAAA,QAA6DC,wCAA7D;AAEN,QAAMoB,cAAc,GAAGH,OAAO,KAAKb,SAAZ,GAAwBI,IAAI,CAACC,MAAL,IAAeQ,OAAvC,GAAiD,KAAxE;AAEA,QAAMI,UAAU,GAAGF,QAAQ,GAAG,KAAH,GAAYD,QAAQ,IAAI,KAAnD;AAEA,QAAMI,SAAS,GAAG,CAACH,QAAD,IAAa,CAACC,cAAhC;AAEA,WACEhC;AAAKmC,eAAS,EAAEjC,cAAc,CAACkC;AAA/B,OACGhB,IAAI,CAACiB,GAAL,CAAS,UAACC,GAAD,EAAMb,CAAN,EAAO;AAAK,aACpBzB,oBAACC,GAAD,EAAI;AACFsC,WAAG,EAAEd,CADH;AAEFf,aAAK,EAAE4B,GAFL;AAGFE,aAAK,EAAEf,CAHL;AAIFK,gBAAQ,EAAEG,UAJR;AAKFF,gBAAQ,EAAEA,QAAQ,IAAI,KALpB;AAMFU,gBAAQ,EAAErC,KAAI,CAACqC,QANb;AAOFC,cAAM,EAAEtC,KAAI,CAACuC,SAPX;AAQFC,cAAM,EAAExC,KAAI,CAACc,SARX;AASFP,iBAAS,EAAEA,SATT;AAUFC,yBAAiB,EAAEA;AAVjB,OAAJ,CADoB;AAarB,KAbA,CADH,EAeGsB,SAAS,IACRlC;AACE6C,SAAG,EAAE,KAAKJ,QADZ;AAEE/B,WAAK,EAAEL,KAFT;AAGE8B,eAAS,EAAEjC,cAAc,CAACG,KAH5B;AAIEuB,iBAAW,EAAEA,WAAW,IAAI,sBAJ9B;AAKEJ,cAAQ,EAAE,KAAKsB,aALjB;AAMEC,eAAS,EAAE,KAAKC;AANlB,MAhBJ,CADF;AA6BD,GAzCD;;AA2CF;AAAC,CAhHD,CAA2ChD,KAAK,CAACiD,SAAjD","names":["React","Tag","classSelectors","__extends","_this","input","createRef","e","setState","target","value","validator","removeOnBackspace","keyCode","preventDefault","valid","undefined","addTag","removeTag","props","tags","length","slice","push","onChange","i","splice","ReactTagInput","placeholder","maxTags","editable","readOnly","maxTagsReached","isEditable","showInput","className","wrapper","map","tag","key","index","inputRef","update","updateTag","remove","ref","onInputChange","onKeyDown","onInputKeyDown","Component"],"sourceRoot":"","sources":["../../src/index.tsx"],"sourcesContent":["import React from \"react\";\nimport {Tag} from \"./components/Tag\";\nimport {classSelectors} from \"./utils/selectors\";\n\ntype Tags = string[];\n\nexport interface ReactTagInputProps {\n  tags: Tags;\n  onChange: (tags: Tags) => void;\n  placeholder?: string;\n  maxTags?: number;\n  validator?: (val: string) => boolean;\n  editable?: boolean;\n  readOnly?: boolean;\n  removeOnBackspace?: boolean;\n}\n\ninterface State {\n  input: string;\n}\n\nexport default class ReactTagInput extends React.Component<ReactTagInputProps, State> {\n\n  state = { input: \"\" };\n\n  // Ref for input element\n  inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ input: e.target.value });\n  }\n\n  onInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\n    const { input } = this.state;\n    const { validator, removeOnBackspace } = this.props;\n\n    // On enter\n    if (e.keyCode === 13) {\n\n      // Prevent form submission if tag input is nested in <form>\n      e.preventDefault();\n\n      // If input is blank, do nothing\n      if (input === \"\") { return; }\n\n      // Check if input is valid\n      const valid = validator !== undefined ? validator(input) : true;\n      if (!valid) {\n        return;\n      }\n\n      // Add input to tag list\n      this.addTag(input);\n\n    }\n    // On backspace or delete\n    else if (removeOnBackspace && (e.keyCode === 8 || e.keyCode === 46)) {\n\n      // If currently typing, do nothing\n      if (input !== \"\") {\n        return;\n      }\n\n      // If input is blank, remove previous tag\n      this.removeTag(this.props.tags.length - 1);\n\n    }\n\n  }\n\n  addTag = (value: string) => {\n    const tags = [ ...this.props.tags ];\n    tags.push(value);\n    this.props.onChange(tags);\n    this.setState({ input: \"\" });\n  }\n\n  removeTag = (i: number) => {\n    const tags = [ ...this.props.tags ];\n    tags.splice(i, 1);\n    this.props.onChange(tags);\n  }\n\n  updateTag = (i: number, value: string) => {\n    const tags = [...this.props.tags];\n    tags[i] = value;\n    this.props.onChange(tags);\n  }\n\n  render() {\n\n    const { input } = this.state;\n\n    const { tags, placeholder, maxTags, editable, readOnly, validator, removeOnBackspace } = this.props;\n\n    const maxTagsReached = maxTags !== undefined ? tags.length >= maxTags : false;\n\n    const isEditable = readOnly ? false : (editable || false);\n\n    const showInput = !readOnly && !maxTagsReached;\n\n    return (\n      <div className={classSelectors.wrapper}>\n        {tags.map((tag, i) => (\n          <Tag\n            key={i}\n            value={tag}\n            index={i}\n            editable={isEditable}\n            readOnly={readOnly || false}\n            inputRef={this.inputRef}\n            update={this.updateTag}\n            remove={this.removeTag}\n            validator={validator}\n            removeOnBackspace={removeOnBackspace}\n          />\n        ))}\n        {showInput &&\n          <input\n            ref={this.inputRef}\n            value={input}\n            className={classSelectors.input}\n            placeholder={placeholder || \"Type and press enter\"}\n            onChange={this.onInputChange}\n            onKeyDown={this.onInputKeyDown}\n          />\n        }\n      </div>\n    );\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}