{"ast":null,"code":"// /**\n// =========================================================\n// * Soft UI Dashboard PRO React - v2.0.0\n// =========================================================\n// * Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-material-ui\n// * Copyright 2021 Creative Tim (https://www.creative-tim.com)\n// Coded by www.creative-tim.com\n//  =========================================================\n// * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// */\n// import { useEffect, useState } from \"react\";\n// // react-router-dom components\n// import { useLocation, NavLink } from \"react-router-dom\";\n// // prop-types is a library for typechecking of props.\n// import PropTypes from \"prop-types\";\n// // clsx is a utility for constructing className strings conditionally\n// import clsx from \"clsx\";\n// // @mui material components\n// import Drawer from \"@mui/material/Drawer\";\n// import List from \"@mui/material/List\";\n// import Divider from \"@mui/material/Divider\";\n// import Link from \"@mui/material/Link\";\n// import Icon from \"@mui/material/Icon\";\n// // Soft UI Dashboard PRO React components\n// import SuiBox from \"components/SuiBox\";\n// import SuiTypography from \"components/SuiTypography\";\n// // Soft UI Dashboard PRO React example components\n// import SidenavCollapse from \"examples/Sidenav/SidenavCollapse\";\n// import SidenavList from \"examples/Sidenav/SidenavList\";\n// import SidenavItem from \"examples/Sidenav/SidenavItem\";\n// import SidenavCard from \"examples/Sidenav/SidenavCard\";\n// // Custom styles for the Sidenav\n// import styles from \"examples/Sidenav/styles/sidenav\";\n// // Images\n// // import SoftUILogo from \"assets/images/logo-ct.png\";\n// // Soft UI Dashboard PRO React context\n// import { useSoftUIController } from \"context\";\n// function Sidenav({ routes, ...rest }) {\n//   const [openCollapse, setOpenCollapse] = useState(false);\n//   const [openNestedCollapse, setOpenNestedCollapse] = useState(false);\n//   const [controller, dispatch] = useSoftUIController();\n//   const { miniSidenav, transparentSidenav } = controller;\n//   const classes = styles({ miniSidenav, transparentSidenav });\n//   const location = useLocation();\n//   const { pathname } = location;\n//   const collapseName = pathname.split(\"/\").slice(1)[0];\n//   const itemName = pathname.split(\"/\").slice(1)[1];\n//   const closeSizenav = () => dispatch({ type: \"MINI_SIDENAV\", value: true });\n//   useEffect(() => {\n//     // A function that sets the mini state of the sidenav.\n//     function handleMiniSidenav() {\n//       dispatch({\n//         type: \"MINI_SIDENAV\",\n//         value: window.innerWidth < 1200,\n//       });\n//     }\n//     /** \n//      The event listener that's calling the handleMiniSidenav function when resizing the window.\n//     */\n//     window.addEventListener(\"resize\", handleMiniSidenav);\n//     // Call the handleMiniSidenav function to set the state with the initial value.\n//     handleMiniSidenav();\n//     // Remove event listener on cleanup\n//     return () => window.removeEventListener(\"resize\", handleMiniSidenav);\n//   }, [dispatch, location]);\n//   // Render all the nested collapse items from the routes.js\n//   const renderNestedCollapse = (collapse) => {\n//     const template = collapse.map(({ name, route, key, href }) =>\n//       href ? (\n//         <Link\n//           key={key}\n//           href={href}\n//           target=\"_blank\"\n//           rel=\"noreferrer\"\n//           className={classes.sidenav_navlink}\n//         >\n//           <SidenavItem name={name} nested />\n//         </Link>\n//       ) : (\n//         <NavLink to={route} key={key} className={classes.sidenav_navlink}>\n//           <SidenavItem name={name} active={route === pathname} nested />\n//         </NavLink>\n//       )\n//     );\n//     return template;\n//   };\n//   // Render the all the collpases from the routes.js\n//   const renderCollapse = (collapses) =>\n//     collapses.map(({ name, collapse, route, href, key }) => {\n//       let returnValue;\n//       if (collapse) {\n//         returnValue = (\n//           <SidenavItem\n//             key={key}\n//             name={name}\n//             active={key === itemName}\n//             open={openNestedCollapse === name}\n//             onClick={() =>\n//               openNestedCollapse === name\n//                 ? setOpenNestedCollapse(false)\n//                 : setOpenNestedCollapse(name)\n//             }\n//           >\n//             {renderNestedCollapse(collapse)}\n//           </SidenavItem>\n//         );\n//       } else {\n//         returnValue = href ? (\n//           <Link\n//             href={href}\n//             key={key}\n//             target=\"_blank\"\n//             rel=\"noreferrer\"\n//             className={classes.sidenav_navlink}\n//           >\n//             <SidenavItem name={name} active={key === itemName} />\n//           </Link>\n//         ) : (\n//           <NavLink to={route} key={key} className={classes.sidenav_navlink}>\n//             <SidenavItem name={name} active={key === itemName} />\n//           </NavLink>\n//         );\n//       }\n//       return <SidenavList key={key}>{returnValue}</SidenavList>;\n//     });\n//   // Render all the routes from the routes.js (All the visible items on the Sidenav)\n//   const renderRoutes = routes.map(\n//     ({ type, name, icon, title, collapse, noCollapse, key, route }) => {\n//       let returnValue;\n//       if (type === \"collapse\") {\n//         returnValue = route ? (\n//           <Link\n//             href={route}\n//             key={key}\n//             target=\"_blank\"\n//             rel=\"noreferrer\"\n//             className={classes.sidenav_navlink}\n//           >\n//             <SidenavCollapse\n//               name={name}\n//               icon={icon}\n//               active={key === collapseName}\n//               noCollapse={noCollapse}\n//             />\n//           </Link>\n//         ) : (\n//           <SidenavCollapse\n//             key={key}\n//             name={name}\n//             icon={icon}\n//             active={key === collapseName}\n//             open={openCollapse === name}\n//             onClick={() => (openCollapse === name ? setOpenCollapse(false) : setOpenCollapse(name))}\n//           >\n//             {collapse ? renderCollapse(collapse) : null}\n//           </SidenavCollapse>\n//         );\n//       } else if (type === \"title\") {\n//         returnValue = (\n//           <SuiTypography\n//             key={key}\n//             variant=\"caption\"\n//             fontWeight=\"bold\"\n//             textTransform=\"uppercase\"\n//             customClass={classes.sidenav_title}\n//           >\n//             {title}\n//           </SuiTypography>\n//         );\n//       } else if (type === \"divider\") {\n//         returnValue = <Divider key={key} />;\n//       }\n//       return returnValue;\n//     }\n//   );\n//   return (\n//     <Drawer\n//       {...rest}\n//       variant=\"permanent\"\n//       classes={{\n//         paper: clsx(classes.sidenav, {\n//           [classes.sidenav_open]: !miniSidenav,\n//           [classes.sidenav_close]: miniSidenav,\n//         }),\n//       }}\n//     >\n//       <SuiBox customClass={classes.sidenav_header}>\n//         <SuiBox\n//           display={{ xs: \"block\", xl: \"none\" }}\n//           position=\"absolute\"\n//           top={0}\n//           right={0}\n//           p={1.625}\n//           customClass=\"cursor-pointer\"\n//           onClick={closeSizenav}\n//         >\n//           <SuiTypography variant=\"h6\" textColor=\"secondary\">\n//             <Icon className=\" font-bold\">close</Icon>\n//           </SuiTypography>\n//         </SuiBox>\n//         <NavLink to=\"/\">\n//           {/* <SuiBox\n//             component=\"\"\n//             src={SoftUILogo}\n//             alt=\"\"\n//             customClass={classes.sidenav_logo}\n//           /> */}\n//           <SuiBox customClass={classes.sidenav_logoLabel}>\n//             {/* <SuiTypography component=\"\" variant=\"\" fontWeight=\"\"> */}\n//             Fundexpert Fintech\n//             {/* </SuiTypography> */}\n//           </SuiBox>\n//         </NavLink>\n//       </SuiBox>\n//       <Divider />\n//       <List>{renderRoutes}</List>\n//       <SuiBox customClass={classes.sidenav_footer}>\n//         <SidenavCard />\n//       </SuiBox>\n//     </Drawer>\n//   );\n// }\n// // Typechecking props for the Sidenav\n// Sidenav.propTypes = {\n//   routes: PropTypes.arrayOf(PropTypes.object).isRequired,\n// };\n// export default Sidenav;","map":{"version":3,"sources":["C:/Fund/soft/admin/src/examples/Sidenav/index.js"],"names":[],"mappingssourcesContent":["// /**\n// =========================================================\n// * Soft UI Dashboard PRO React - v2.0.0\n// =========================================================\n\n// * Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-material-ui\n// * Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\n// Coded by www.creative-tim.com\n\n//  =========================================================\n\n// * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// */\n\n// import { useEffect, useState } from \"react\";\n\n// // react-router-dom components\n// import { useLocation, NavLink } from \"react-router-dom\";\n\n// // prop-types is a library for typechecking of props.\n// import PropTypes from \"prop-types\";\n\n// // clsx is a utility for constructing className strings conditionally\n// import clsx from \"clsx\";\n\n// // @mui material components\n// import Drawer from \"@mui/material/Drawer\";\n// import List from \"@mui/material/List\";\n// import Divider from \"@mui/material/Divider\";\n// import Link from \"@mui/material/Link\";\n// import Icon from \"@mui/material/Icon\";\n\n// // Soft UI Dashboard PRO React components\n// import SuiBox from \"components/SuiBox\";\n// import SuiTypography from \"components/SuiTypography\";\n\n// // Soft UI Dashboard PRO React example components\n// import SidenavCollapse from \"examples/Sidenav/SidenavCollapse\";\n// import SidenavList from \"examples/Sidenav/SidenavList\";\n// import SidenavItem from \"examples/Sidenav/SidenavItem\";\n// import SidenavCard from \"examples/Sidenav/SidenavCard\";\n\n// // Custom styles for the Sidenav\n// import styles from \"examples/Sidenav/styles/sidenav\";\n\n// // Images\n// // import SoftUILogo from \"assets/images/logo-ct.png\";\n\n// // Soft UI Dashboard PRO React context\n// import { useSoftUIController } from \"context\";\n\n// function Sidenav({ routes, ...rest }) {\n//   const [openCollapse, setOpenCollapse] = useState(false);\n//   const [openNestedCollapse, setOpenNestedCollapse] = useState(false);\n//   const [controller, dispatch] = useSoftUIController();\n//   const { miniSidenav, transparentSidenav } = controller;\n//   const classes = styles({ miniSidenav, transparentSidenav });\n//   const location = useLocation();\n//   const { pathname } = location;\n//   const collapseName = pathname.split(\"/\").slice(1)[0];\n//   const itemName = pathname.split(\"/\").slice(1)[1];\n\n//   const closeSizenav = () => dispatch({ type: \"MINI_SIDENAV\", value: true });\n\n//   useEffect(() => {\n//     // A function that sets the mini state of the sidenav.\n//     function handleMiniSidenav() {\n//       dispatch({\n//         type: \"MINI_SIDENAV\",\n//         value: window.innerWidth < 1200,\n//       });\n//     }\n//     /** \n//      The event listener that's calling the handleMiniSidenav function when resizing the window.\n//     */\n//     window.addEventListener(\"resize\", handleMiniSidenav);\n\n//     // Call the handleMiniSidenav function to set the state with the initial value.\n//     handleMiniSidenav();\n\n//     // Remove event listener on cleanup\n//     return () => window.removeEventListener(\"resize\", handleMiniSidenav);\n//   }, [dispatch, location]);\n\n//   // Render all the nested collapse items from the routes.js\n//   const renderNestedCollapse = (collapse) => {\n//     const template = collapse.map(({ name, route, key, href }) =>\n//       href ? (\n//         <Link\n//           key={key}\n//           href={href}\n//           target=\"_blank\"\n//           rel=\"noreferrer\"\n//           className={classes.sidenav_navlink}\n//         >\n//           <SidenavItem name={name} nested />\n//         </Link>\n//       ) : (\n//         <NavLink to={route} key={key} className={classes.sidenav_navlink}>\n//           <SidenavItem name={name} active={route === pathname} nested />\n//         </NavLink>\n//       )\n//     );\n\n//     return template;\n//   };\n\n//   // Render the all the collpases from the routes.js\n//   const renderCollapse = (collapses) =>\n//     collapses.map(({ name, collapse, route, href, key }) => {\n//       let returnValue;\n\n//       if (collapse) {\n//         returnValue = (\n//           <SidenavItem\n//             key={key}\n//             name={name}\n//             active={key === itemName}\n//             open={openNestedCollapse === name}\n//             onClick={() =>\n//               openNestedCollapse === name\n//                 ? setOpenNestedCollapse(false)\n//                 : setOpenNestedCollapse(name)\n//             }\n//           >\n//             {renderNestedCollapse(collapse)}\n//           </SidenavItem>\n//         );\n//       } else {\n//         returnValue = href ? (\n//           <Link\n//             href={href}\n//             key={key}\n//             target=\"_blank\"\n//             rel=\"noreferrer\"\n//             className={classes.sidenav_navlink}\n//           >\n//             <SidenavItem name={name} active={key === itemName} />\n//           </Link>\n//         ) : (\n//           <NavLink to={route} key={key} className={classes.sidenav_navlink}>\n//             <SidenavItem name={name} active={key === itemName} />\n//           </NavLink>\n//         );\n//       }\n//       return <SidenavList key={key}>{returnValue}</SidenavList>;\n//     });\n\n//   // Render all the routes from the routes.js (All the visible items on the Sidenav)\n//   const renderRoutes = routes.map(\n//     ({ type, name, icon, title, collapse, noCollapse, key, route }) => {\n//       let returnValue;\n\n//       if (type === \"collapse\") {\n//         returnValue = route ? (\n//           <Link\n//             href={route}\n//             key={key}\n//             target=\"_blank\"\n//             rel=\"noreferrer\"\n//             className={classes.sidenav_navlink}\n//           >\n//             <SidenavCollapse\n//               name={name}\n//               icon={icon}\n//               active={key === collapseName}\n//               noCollapse={noCollapse}\n//             />\n//           </Link>\n//         ) : (\n//           <SidenavCollapse\n//             key={key}\n//             name={name}\n//             icon={icon}\n//             active={key === collapseName}\n//             open={openCollapse === name}\n//             onClick={() => (openCollapse === name ? setOpenCollapse(false) : setOpenCollapse(name))}\n//           >\n//             {collapse ? renderCollapse(collapse) : null}\n//           </SidenavCollapse>\n//         );\n//       } else if (type === \"title\") {\n//         returnValue = (\n//           <SuiTypography\n//             key={key}\n//             variant=\"caption\"\n//             fontWeight=\"bold\"\n//             textTransform=\"uppercase\"\n//             customClass={classes.sidenav_title}\n//           >\n//             {title}\n//           </SuiTypography>\n//         );\n//       } else if (type === \"divider\") {\n//         returnValue = <Divider key={key} />;\n//       }\n\n//       return returnValue;\n//     }\n//   );\n\n//   return (\n//     <Drawer\n//       {...rest}\n//       variant=\"permanent\"\n//       classes={{\n//         paper: clsx(classes.sidenav, {\n//           [classes.sidenav_open]: !miniSidenav,\n//           [classes.sidenav_close]: miniSidenav,\n//         }),\n//       }}\n//     >\n//       <SuiBox customClass={classes.sidenav_header}>\n//         <SuiBox\n//           display={{ xs: \"block\", xl: \"none\" }}\n//           position=\"absolute\"\n//           top={0}\n//           right={0}\n//           p={1.625}\n//           customClass=\"cursor-pointer\"\n//           onClick={closeSizenav}\n//         >\n//           <SuiTypography variant=\"h6\" textColor=\"secondary\">\n//             <Icon className=\" font-bold\">close</Icon>\n//           </SuiTypography>\n//         </SuiBox>\n//         <NavLink to=\"/\">\n//           {/* <SuiBox\n//             component=\"\"\n//             src={SoftUILogo}\n//             alt=\"\"\n//             customClass={classes.sidenav_logo}\n//           /> */}\n//           <SuiBox customClass={classes.sidenav_logoLabel}>\n//             {/* <SuiTypography component=\"\" variant=\"\" fontWeight=\"\"> */}\n//             Fundexpert Fintech\n//             {/* </SuiTypography> */}\n//           </SuiBox>\n//         </NavLink>\n//       </SuiBox>\n//       <Divider />\n//       <List>{renderRoutes}</List>\n\n//       <SuiBox customClass={classes.sidenav_footer}>\n//         <SidenavCard />\n//       </SuiBox>\n//     </Drawer>\n//   );\n// }\n\n// // Typechecking props for the Sidenav\n// Sidenav.propTypes = {\n//   routes: PropTypes.arrayOf(PropTypes.object).isRequired,\n// };\n\n// export default Sidenav;\n"]},"metadata":{},"sourceType":"module"}