{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from \"react\";\nimport { classSelectors } from \"../utils/selectors\";\nimport { ContentEditable } from \"./ContentEditable\";\n\nvar Tag = function (_super) {\n  __extends(Tag, _super);\n\n  function Tag() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.innerEditableRef = React.createRef();\n\n    _this.remove = function () {\n      return _this.props.remove(_this.props.index);\n    };\n\n    return _this;\n  }\n\n  Tag.prototype.render = function () {\n    var _a = this.props,\n        value = _a.value,\n        index = _a.index,\n        editable = _a.editable,\n        inputRef = _a.inputRef,\n        validator = _a.validator,\n        update = _a.update,\n        readOnly = _a.readOnly,\n        removeOnBackspace = _a.removeOnBackspace;\n    var tagRemoveClass = !readOnly ? classSelectors.tagRemove : classSelectors.tagRemove + \" \" + classSelectors.tagRemoveReadOnly;\n    return React.createElement(\"div\", {\n      className: classSelectors.tag\n    }, !editable && React.createElement(\"div\", {\n      className: classSelectors.tagContent\n    }, value), editable && React.createElement(ContentEditable, {\n      value: value,\n      inputRef: inputRef,\n      innerEditableRef: this.innerEditableRef,\n      className: classSelectors.tagContent,\n      change: function change(newValue) {\n        return update(index, newValue);\n      },\n      remove: this.remove,\n      validator: validator,\n      removeOnBackspace: removeOnBackspace\n    }), React.createElement(\"div\", {\n      className: tagRemoveClass,\n      onClick: this.remove\n    }));\n  };\n\n  return Tag;\n}(React.Component);\n\nexport { Tag };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,QAA6B,oBAA7B;AACA,SAAQC,eAAR,QAA8B,mBAA9B;;AAcA;AAAyBC;;AAAzB;AAAA;;AAEEC,6BAAoDJ,KAAK,CAACK,SAAN,EAApD;;AAEAD,mBAAS;AAAM,kBAAI,CAACE,KAAL,CAAWC,MAAX,CAAkBH,KAAI,CAACE,KAAL,CAAWE,KAA7B;AAAmC,KAAlD;;;AA8BD;;AA5BCC;AAEQ;AAAA,QAAEC,gBAAF;AAAA,QAASF,gBAAT;AAAA,QAAgBG,sBAAhB;AAAA,QAA0BC,sBAA1B;AAAA,QAAoCC,wBAApC;AAAA,QAA+CC,kBAA/C;AAAA,QAAuDC,sBAAvD;AAAA,QAAiEC,wCAAjE;AAEN,QAAMC,cAAc,GAAG,CAACF,QAAD,GACrBd,cAAc,CAACiB,SADM,GACSjB,cAAc,CAACiB,SAAf,GAAwB,GAAxB,GAA4BjB,cAAc,CAACkB,iBAD3E;AAGA,WACEnB;AAAKoB,eAAS,EAAEnB,cAAc,CAACoB;AAA/B,OACG,CAACV,QAAD,IAAaX;AAAKoB,eAAS,EAAEnB,cAAc,CAACqB;AAA/B,OAA4CZ,KAA5C,CADhB,EAEGC,QAAQ,IACPX,oBAACE,eAAD,EAAgB;AACdQ,WAAK,EAAEA,KADO;AAEdE,cAAQ,EAAEA,QAFI;AAGdW,sBAAgB,EAAE,KAAKA,gBAHT;AAIdH,eAAS,EAAEnB,cAAc,CAACqB,UAJZ;AAKdE,YAAM,EAAE,gBAACC,QAAD,EAAS;AAAK,qBAAM,CAACjB,KAAD,EAAQiB,QAAR,CAAN;AAAuB,OAL/B;AAMdlB,YAAM,EAAE,KAAKA,MANC;AAOdM,eAAS,EAAEA,SAPG;AAQdG,uBAAiB,EAAEA;AARL,KAAhB,CAHJ,EAcEhB;AAAKoB,eAAS,EAAEH,cAAhB;AAAgCS,aAAO,EAAE,KAAKnB;AAA9C,MAdF,CADF;AAmBD,GA1BD;;AA4BF;AAAC,CAlCD,CAAyBP,KAAK,CAAC2B,SAA/B","names":["React","classSelectors","ContentEditable","__extends","_this","createRef","props","remove","index","Tag","value","editable","inputRef","validator","update","readOnly","removeOnBackspace","tagRemoveClass","tagRemove","tagRemoveReadOnly","className","tag","tagContent","innerEditableRef","change","newValue","onClick","Component"],"sourceRoot":"","sources":["../../../src/components/Tag.tsx"],"sourcesContent":["import React from \"react\";\nimport {classSelectors} from \"../utils/selectors\";\nimport {ContentEditable} from \"./ContentEditable\";\n\ninterface Props {\n  value: string;\n  index: number;\n  editable: boolean;\n  readOnly: boolean;\n  inputRef: React.RefObject<HTMLInputElement>;\n  update: (i: number, value: string) => void;\n  remove: (i: number) => void;\n  validator?: (val: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class Tag extends React.Component<Props> {\n\n  innerEditableRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  remove = () => this.props.remove(this.props.index);\n\n  render() {\n\n    const { value, index, editable, inputRef, validator, update, readOnly, removeOnBackspace } = this.props;\n\n    const tagRemoveClass = !readOnly ?\n      classSelectors.tagRemove : `${classSelectors.tagRemove} ${classSelectors.tagRemoveReadOnly}`;\n\n    return (\n      <div className={classSelectors.tag}>\n        {!editable && <div className={classSelectors.tagContent}>{value}</div>}\n        {editable && (\n          <ContentEditable\n            value={value}\n            inputRef={inputRef}\n            innerEditableRef={this.innerEditableRef}\n            className={classSelectors.tagContent}\n            change={(newValue) => update(index, newValue)}\n            remove={this.remove}\n            validator={validator}\n            removeOnBackspace={removeOnBackspace}\n          />\n        )}\n        <div className={tagRemoveClass} onClick={this.remove}/>\n      </div>\n    );\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}