{"ast":null,"code":"var _jsxFileName = \"C:\\\\Fund\\\\soft\\\\admin\\\\src\\\\layouts\\\\pages\\\\account\\\\components\\\\Tab4\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@mui/material/Grid\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport SuiBox from \"components/SuiBox\";\nimport breakpoints from \"assets/theme/base/breakpoints\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BaseLayout(_ref) {\n  _s();\n\n  let {\n    stickyNavbar\n  } = _ref;\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\n  const [tabValue, setTabValue] = useState(0);\n  useEffect(() => {\n    // A function that sets the orientation state of the tabs.\n    function handleTabsOrientation() {\n      return window.innerWidth < breakpoints.values.sm ? setTabsOrientation(\"vertical\") : setTabsOrientation(\"horizontal\");\n    }\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\n\n\n    window.addEventListener(\"resize\", handleTabsOrientation); // Call the handleTabsOrientation function to set the state with the initial value.\n\n    handleTabsOrientation(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\n  }, [tabsOrientation]);\n\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\n\n  return (\n    /*#__PURE__*/\n    // <DashboardLayout>\n    //     <DashboardNavbar absolute={!stickyNavbar} isMini />\n    _jsxDEV(SuiBox, {\n      children: /*#__PURE__*/_jsxDEV(SuiBox, {\n        mt: stickyNavbar ? 3 : 10,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          p: 3,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            sm: 12,\n            lg: 12,\n            children: /*#__PURE__*/_jsxDEV(AppBar, {\n              position: \"static\",\n              children: /*#__PURE__*/_jsxDEV(Tabs, {\n                orientation: tabsOrientation,\n                value: tabValue,\n                onChange: handleSetTabValue,\n                style: {\n                  height: '90px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Tab, {\n                  label: \" AMC)\",\n                  style: {\n                    backgroundColor: \"#21d4fd\",\n                    fontWeight: \"bold\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                  label: \"Invested Amount\",\n                  style: {\n                    backgroundColor: \"#21d4fd\",\n                    fontWeight: \"bold\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                  label: \"AUM\",\n                  style: {\n                    backgroundColor: \"#21d4fd\",\n                    fontWeight: \"bold\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this) // <Footer />\n    // </DashboardLayout>\n\n  );\n} // Setting default values for the props of BaseLayout\n\n\n_s(BaseLayout, \"dqRNHF4lTFQFTiomXMDTwDH/T4Q=\");\n\n_c = BaseLayout;\nBaseLayout.defaultProps = {\n  stickyNavbar: false\n}; // Typechecking props for BaseLayout\n\nBaseLayout.propTypes = {\n  stickyNavbar: PropTypes.bool\n};\nexport default BaseLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"BaseLayout\");","map":{"version":3,"sources":["C:/Fund/soft/admin/src/layouts/pages/account/components/Tab4/index.js"],"names":["useState","useEffect","PropTypes","Grid","AppBar","Tabs","Tab","SuiBox","breakpoints","BaseLayout","stickyNavbar","tabsOrientation","setTabsOrientation","tabValue","setTabValue","handleTabsOrientation","window","innerWidth","values","sm","addEventListener","removeEventListener","handleSetTabValue","event","newValue","height","backgroundColor","fontWeight","defaultProps","propTypes","bool"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport SuiBox from \"components/SuiBox\";\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n\r\nfunction BaseLayout({ stickyNavbar }) {\r\n    const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n    const [tabValue, setTabValue] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // A function that sets the orientation state of the tabs.\r\n        function handleTabsOrientation() {\r\n            return window.innerWidth < breakpoints.values.sm\r\n                ? setTabsOrientation(\"vertical\")\r\n                : setTabsOrientation(\"horizontal\");\r\n        }\r\n\r\n        /** \r\n         The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n        */\r\n        window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n        // Call the handleTabsOrientation function to set the state with the initial value.\r\n        handleTabsOrientation();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n    }, [tabsOrientation]);\r\n\r\n    const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n\r\n    return (\r\n\r\n        // <DashboardLayout>\r\n        //     <DashboardNavbar absolute={!stickyNavbar} isMini />\r\n            <SuiBox>\r\n                <SuiBox mt={stickyNavbar ? 3 : 10}>\r\n                    <Grid container p={3}>\r\n                        <Grid item xs={10} sm={12} lg={12}>\r\n                            <AppBar position=\"static\">\r\n                                <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue} style={{ height: '90px' }}>\r\n                                    <Tab label=\" AMC)\"  style={{ backgroundColor: \"#21d4fd\",fontWeight: \"bold\" }} />\r\n                                    <Tab label=\"Invested Amount\" style={{ backgroundColor: \"#21d4fd\",fontWeight: \"bold\" }}/>\r\n                                    <Tab label=\"AUM\" style={{ backgroundColor: \"#21d4fd\",fontWeight: \"bold\" }}/>\r\n                                 \r\n                                </Tabs>\r\n                            </AppBar>\r\n                        </Grid>\r\n                    </Grid>\r\n                   \r\n                </SuiBox>\r\n            </SuiBox>\r\n            // <Footer />\r\n        // </DashboardLayout>\r\n    );\r\n}\r\n\r\n// Setting default values for the props of BaseLayout\r\nBaseLayout.defaultProps = {\r\n    stickyNavbar: false,\r\n};\r\n\r\n// Typechecking props for BaseLayout\r\nBaseLayout.propTypes = {\r\n    stickyNavbar: PropTypes.bool,\r\n   \r\n};\r\n\r\nexport default BaseLayout;\r\n"]},"metadata":{},"sourceType":"module"}