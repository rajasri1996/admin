{"ast":null,"code":"var _jsxFileName = \"C:\\\\Fund\\\\soft-ui-dashboard-pro-react-v2.0.0\\\\admin\\\\src\\\\layouts\\\\pages\\\\widgets\\\\components\\\\Chart\\\\index.js\",\n    _s = $RefreshSig$();\n\n/**\n=========================================================\n* Soft UI Dashboard PRO React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-material-ui\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\nimport { useRef, useEffect, useState, useMemo } from \"react\"; // porp-types is a library for typechecking of props\n\nimport PropTypes from \"prop-types\"; // react-chartjs-2 components\n\nimport { Line } from \"react-chartjs-2\"; // @mui material components\n\nimport Card from \"@mui/material/Card\"; // Soft UI Dashboard PRO React components\n\nimport SuiBox from \"components/SuiBox\";\nimport SuiTypography from \"components/SuiTypography\"; // Soft UI Dashboard PRO React helper functions\n\nimport gradientChartLine from \"assets/theme/functions/gradientChartLine\"; // Chart configurations\n\nimport configs from \"layouts/pages/widgets/components/Chart/configs\"; // Soft UI Dashboard PRO React base styles\n\nimport colors from \"assets/theme/base/colors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    title,\n    count,\n    percentage,\n    chart\n  } = _ref;\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({});\n  const {\n    data,\n    options\n  } = chartData;\n  useEffect(() => {\n    const chartDatasets = chart.datasets.map(dataset => ({ ...dataset,\n      tension: 0.4,\n      pointRadius: 0,\n      borderWidth: 2,\n      borderColor: colors[dataset.color].main,\n      fill: true,\n      maxBarThickness: 6,\n      backgroundColor: gradientChartLine(chartRef.current.children[0], colors[dataset.color].main, 0.075)\n    }));\n    setChartData(configs(chart.labels, chartDatasets));\n  }, [chart]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(SuiBox, {\n      p: 2,\n      lineHeight: 1,\n      children: [/*#__PURE__*/_jsxDEV(SuiTypography, {\n        variant: \"button\",\n        textTransform: \"capitalize\",\n        fontWeight: \"medium\",\n        textColor: \"text\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SuiTypography, {\n        variant: \"h5\",\n        fontWeight: \"bold\",\n        textColor: \"dark\",\n        children: [count, \"\\xA0\", /*#__PURE__*/_jsxDEV(SuiTypography, {\n          variant: \"button\",\n          fontWeight: \"bold\",\n          textColor: percentage.color,\n          children: percentage.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), useMemo(() => /*#__PURE__*/_jsxDEV(SuiBox, {\n      ref: chartRef,\n      sx: {\n        height: \"6.25rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this), [chartData])]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n} // Typechecking props for the Chart\n\n\n_s(Chart, \"n3wPcHgMRERcqUWkVtpcWGQ3sy8=\");\n\n_c = Chart;\nChart.propTypes = {\n  title: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  percentage: PropTypes.shape({\n    color: PropTypes.oneOf([\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"dark\"]),\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n  }).isRequired,\n  chart: PropTypes.objectOf(PropTypes.array).isRequired\n};\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["C:/Fund/soft-ui-dashboard-pro-react-v2.0.0/admin/src/layouts/pages/widgets/components/Chart/index.js"],"names":["useRef","useEffect","useState","useMemo","PropTypes","Line","Card","SuiBox","SuiTypography","gradientChartLine","configs","colors","Chart","title","count","percentage","chart","chartRef","chartData","setChartData","data","options","chartDatasets","datasets","map","dataset","tension","pointRadius","borderWidth","borderColor","color","main","fill","maxBarThickness","backgroundColor","current","children","labels","label","height","propTypes","string","isRequired","oneOfType","node","shape","oneOf","objectOf","array"],"mappings":"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","sourcesContent":["/**\n=========================================================\n* Soft UI Dashboard PRO React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-material-ui\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { useRef, useEffect, useState, useMemo } from \"react\";\n\n// porp-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// react-chartjs-2 components\nimport { Line } from \"react-chartjs-2\";\n\n// @mui material components\nimport Card from \"@mui/material/Card\";\n\n// Soft UI Dashboard PRO React components\nimport SuiBox from \"components/SuiBox\";\nimport SuiTypography from \"components/SuiTypography\";\n\n// Soft UI Dashboard PRO React helper functions\nimport gradientChartLine from \"assets/theme/functions/gradientChartLine\";\n\n// Chart configurations\nimport configs from \"layouts/pages/widgets/components/Chart/configs\";\n\n// Soft UI Dashboard PRO React base styles\nimport colors from \"assets/theme/base/colors\";\n\nfunction Chart({ title, count, percentage, chart }) {\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({});\n  const { data, options } = chartData;\n\n  useEffect(() => {\n    const chartDatasets = chart.datasets.map((dataset) => ({\n      ...dataset,\n      tension: 0.4,\n      pointRadius: 0,\n      borderWidth: 2,\n      borderColor: colors[dataset.color].main,\n      fill: true,\n      maxBarThickness: 6,\n      backgroundColor: gradientChartLine(\n        chartRef.current.children[0],\n        colors[dataset.color].main,\n        0.075\n      ),\n    }));\n\n    setChartData(configs(chart.labels, chartDatasets));\n  }, [chart]);\n\n  return (\n    <Card>\n      <SuiBox p={2} lineHeight={1}>\n        <SuiTypography\n          variant=\"button\"\n          textTransform=\"capitalize\"\n          fontWeight=\"medium\"\n          textColor=\"text\"\n        >\n          {title}\n        </SuiTypography>\n        <SuiTypography variant=\"h5\" fontWeight=\"bold\" textColor=\"dark\">\n          {count}&nbsp;\n          <SuiTypography variant=\"button\" fontWeight=\"bold\" textColor={percentage.color}>\n            {percentage.label}\n          </SuiTypography>\n        </SuiTypography>\n      </SuiBox>\n      {useMemo(\n        () => (\n          <SuiBox ref={chartRef} sx={{ height: \"6.25rem\" }}>\n            <Line data={data} options={options} />\n          </SuiBox>\n        ),\n        [chartData]\n      )}\n    </Card>\n  );\n}\n\n// Typechecking props for the Chart\nChart.propTypes = {\n  title: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  percentage: PropTypes.shape({\n    color: PropTypes.oneOf([\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"dark\"]),\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  }).isRequired,\n  chart: PropTypes.objectOf(PropTypes.array).isRequired,\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}