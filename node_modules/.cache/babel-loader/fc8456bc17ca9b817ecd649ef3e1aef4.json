{"ast":null,"code":"var _jsxFileName = \"C:\\\\Fund\\\\soft\\\\admin\\\\src\\\\layouts\\\\pages\\\\account\\\\components\\\\BaseLayout\\\\index.js\",\n    _s = $RefreshSig$();\n\n/**\n=========================================================\n* Soft UI Dashboard PRO React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-material-ui\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\nimport { useState, useEffect } from \"react\"; // prop-types is a library for typechecking of props\n\nimport PropTypes from \"prop-types\"; // @mui material components\n// import Grid from \"@mui/material/Grid\";\n// import AppBar from \"@mui/material/AppBar\";\n// import Tabs from \"@mui/material/Tabs\";\n// import Tab from \"@mui/material/Tab\";\n// Soft UI Dashboard PRO React components\n// import SuiBox from \"components/SuiBox\";\n// Soft UI Dashboard PRO React base styles\n\nimport breakpoints from \"assets/theme/base/breakpoints\"; // Soft UI Dashboard PRO React example components\n\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\"; // import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\n// import Footer from \"examples/Footer\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BaseLayout() {\n  _s();\n\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\"); // const [tabValue, setTabValue] = useState(0);\n\n  useEffect(() => {\n    // A function that sets the orientation state of the tabs.\n    function handleTabsOrientation() {\n      return window.innerWidth < breakpoints.values.sm ? setTabsOrientation(\"vertical\") : setTabsOrientation(\"horizontal\");\n    }\n    /** \n     The event listener that's calling the handleTabsOrientation function when resizing the window.\n    */\n\n\n    window.addEventListener(\"resize\", handleTabsOrientation); // Call the handleTabsOrientation function to set the state with the initial value.\n\n    handleTabsOrientation(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\n  }, [tabsOrientation]); // const handleSetTabValue = (event, newValue) => setTabValue(newValue);\n\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props of BaseLayout\n\n\n_s(BaseLayout, \"caQiM+hZ/GblDGt6Mdn2cX+x40Q=\");\n\n_c = BaseLayout;\nBaseLayout.defaultProps = {\n  stickyNavbar: false\n}; // Typechecking props for BaseLayout\n\nBaseLayout.propTypes = {\n  stickyNavbar: PropTypes.bool,\n  children: PropTypes.node.isRequired\n};\nexport default BaseLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"BaseLayout\");","map":{"version":3,"sources":["C:/Fund/soft/admin/src/layouts/pages/account/components/BaseLayout/index.js"],"names":["useState","useEffect","PropTypes","breakpoints","DashboardLayout","BaseLayout","tabsOrientation","setTabsOrientation","handleTabsOrientation","window","innerWidth","values","sm","addEventListener","removeEventListener","defaultProps","stickyNavbar","propTypes","bool","children","node","isRequired"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,OAAOC,WAAP,MAAwB,+BAAxB,C,CAEA;;AACA,OAAOC,eAAP,MAA4B,2CAA5B,C,CACA;AACA;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,YAAD,CAAtD,CADoB,CAEpB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,aAASO,qBAAT,GAAiC;AAC/B,aAAOC,MAAM,CAACC,UAAP,GAAoBP,WAAW,CAACQ,MAAZ,CAAmBC,EAAvC,GACHL,kBAAkB,CAAC,UAAD,CADf,GAEHA,kBAAkB,CAAC,YAAD,CAFtB;AAGD;AAED;AACJ;AACA;;;AACIE,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCL,qBAAlC,EAXc,CAad;;AACAA,IAAAA,qBAAqB,GAdP,CAgBd;;AACA,WAAO,MAAMC,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCN,qBAArC,CAAb;AACD,GAlBQ,EAkBN,CAACF,eAAD,CAlBM,CAAT,CAJoB,CAwBpB;;AAEA,sBACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,C,CAED;;;GAjDSD,U;;KAAAA,U;AAkDTA,UAAU,CAACU,YAAX,GAA0B;AACxBC,EAAAA,YAAY,EAAE;AADU,CAA1B,C,CAIA;;AACAX,UAAU,CAACY,SAAX,GAAuB;AACrBD,EAAAA,YAAY,EAAEd,SAAS,CAACgB,IADH;AAErBC,EAAAA,QAAQ,EAAEjB,SAAS,CAACkB,IAAV,CAAeC;AAFJ,CAAvB;AAKA,eAAehB,UAAf","sourcesContent":["/**\n=========================================================\n* Soft UI Dashboard PRO React - v2.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-material-ui\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { useState, useEffect } from \"react\";\n\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// @mui material components\n// import Grid from \"@mui/material/Grid\";\n// import AppBar from \"@mui/material/AppBar\";\n// import Tabs from \"@mui/material/Tabs\";\n// import Tab from \"@mui/material/Tab\";\n\n// Soft UI Dashboard PRO React components\n// import SuiBox from \"components/SuiBox\";\n\n// Soft UI Dashboard PRO React base styles\nimport breakpoints from \"assets/theme/base/breakpoints\";\n\n// Soft UI Dashboard PRO React example components\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\n// import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\n// import Footer from \"examples/Footer\";\n\nfunction BaseLayout() {\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\n  // const [tabValue, setTabValue] = useState(0);\n\n  useEffect(() => {\n    // A function that sets the orientation state of the tabs.\n    function handleTabsOrientation() {\n      return window.innerWidth < breakpoints.values.sm\n        ? setTabsOrientation(\"vertical\")\n        : setTabsOrientation(\"horizontal\");\n    }\n\n    /** \n     The event listener that's calling the handleTabsOrientation function when resizing the window.\n    */\n    window.addEventListener(\"resize\", handleTabsOrientation);\n\n    // Call the handleTabsOrientation function to set the state with the initial value.\n    handleTabsOrientation();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\n  }, [tabsOrientation]);\n\n  // const handleSetTabValue = (event, newValue) => setTabValue(newValue);\n\n  return (\n    <DashboardLayout>\n      {/* <DashboardNavbar absolute={!stickyNavbar} isMini />\n      <SuiBox mt={stickyNavbar ? 3 : 10}>\n        <Grid container>\n          <Grid item xs={12} sm={8} lg={4}>\n            <AppBar position=\"static\">\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\n                <Tab label=\"Messages\" />\n                <Tab label=\"Social\" />\n                <Tab label=\"Notifications\" />\n                <Tab label=\"Backup\" />\n              </Tabs>\n            </AppBar>\n          </Grid>\n        </Grid>\n        {children}\n      </SuiBox>\n      <Footer /> */}\n    </DashboardLayout>\n  );\n}\n\n// Setting default values for the props of BaseLayout\nBaseLayout.defaultProps = {\n  stickyNavbar: false,\n};\n\n// Typechecking props for BaseLayout\nBaseLayout.propTypes = {\n  stickyNavbar: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\n\nexport default BaseLayout;\n"]},"metadata":{},"sourceType":"module"}