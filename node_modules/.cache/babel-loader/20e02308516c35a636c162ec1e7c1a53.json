{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from \"react\";\nimport { safeHtmlString } from \"../utils/functions\";\n\nvar ContentEditable = function (_super) {\n  __extends(ContentEditable, _super);\n\n  function ContentEditable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.focused = false;\n    _this.removed = false;\n    _this.preFocusedValue = \"\";\n\n    _this.onPaste = function (e) {\n      e.preventDefault();\n      var text = e.clipboardData.getData(\"text/plain\");\n      document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n    };\n\n    _this.onFocus = function () {\n      _this.preFocusedValue = _this.getValue();\n      _this.focused = true;\n    };\n\n    _this.onBlur = function () {\n      _this.focused = false;\n      var ref = _this.props.innerEditableRef.current;\n      var _a = _this.props,\n          validator = _a.validator,\n          change = _a.change;\n\n      if (!_this.removed && ref) {\n        if (ref.innerText === \"\") {\n          _this.props.remove();\n\n          return;\n        }\n\n        if (validator) {\n          var valid = validator(_this.getValue());\n\n          if (!valid) {\n            ref.innerText = _this.preFocusedValue;\n            return;\n          }\n        }\n\n        change(ref.innerText);\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n\n        _this.focusInputRef();\n\n        return;\n      }\n\n      var removeOnBackspace = _this.props.removeOnBackspace;\n\n      var value = _this.getValue();\n\n      if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n        _this.removed = true;\n\n        _this.props.remove();\n\n        _this.focusInputRef();\n\n        return;\n      }\n    };\n\n    _this.getValue = function () {\n      var ref = _this.getRef();\n\n      return ref ? ref.innerText : \"\";\n    };\n\n    _this.getRef = function () {\n      return _this.props.innerEditableRef.current;\n    };\n\n    _this.focusInputRef = function () {\n      var inputRef = _this.props.inputRef;\n\n      if (inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n\n    return _this;\n  }\n\n  ContentEditable.prototype.componentDidMount = function () {\n    this.preFocusedValue = this.getValue();\n  };\n\n  ContentEditable.prototype.render = function () {\n    var _a = this.props,\n        value = _a.value,\n        className = _a.className,\n        innerEditableRef = _a.innerEditableRef;\n    return React.createElement(\"div\", {\n      ref: innerEditableRef,\n      className: className,\n      contentEditable: true,\n      onPaste: this.onPaste,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onKeyDown: this.onKeyDown,\n      dangerouslySetInnerHTML: {\n        __html: safeHtmlString(value)\n      }\n    });\n  };\n\n  return ContentEditable;\n}(React.Component);\n\nexport { ContentEditable };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,QAA6B,oBAA7B;;AAaA;AAAqCC;;AAArC;AAAA;;AAGEC,oBAAmB,KAAnB;AAGAA,oBAAmB,KAAnB;AAGAA,4BAA0B,EAA1B;;AAMAA,oBAAU,UAACC,CAAD,EAAwC;AAGhDA,OAAC,CAACC,cAAF;AAGA,UAAMC,IAAI,GAAGF,CAAC,CAACG,aAAF,CAAgBC,OAAhB,CAAwB,YAAxB,CAAb;AAGAC,cAAQ,CAACC,WAAT,CAAqB,YAArB,EAAmC,KAAnC,EAA0CT,cAAc,CAACK,IAAD,CAAxD;AAED,KAXD;;AAaAH,oBAAU;AACRA,WAAI,CAACQ,eAAL,GAAuBR,KAAI,CAACS,QAAL,EAAvB;AACAT,WAAI,CAACU,OAAL,GAAe,IAAf;AACD,KAHD;;AAKAV,mBAAS;AAEPA,WAAI,CAACU,OAAL,GAAe,KAAf;AAEA,UAAMC,GAAG,GAAGX,KAAI,CAACY,KAAL,CAAWC,gBAAX,CAA4BC,OAAxC;AACM;AAAA,UAAEC,wBAAF;AAAA,UAAaC,kBAAb;;AAEN,UAAI,CAAChB,KAAI,CAACiB,OAAN,IAAiBN,GAArB,EAA0B;AAGxB,YAAIA,GAAG,CAACO,SAAJ,KAAkB,EAAtB,EAA0B;AACxBlB,eAAI,CAACY,KAAL,CAAWO,MAAX;;AACA;AACD;;AAGD,YAAIJ,SAAJ,EAAe;AACb,cAAMK,KAAK,GAAGL,SAAS,CAACf,KAAI,CAACS,QAAL,EAAD,CAAvB;;AAEA,cAAI,CAACW,KAAL,EAAY;AACVT,eAAG,CAACO,SAAJ,GAAgBlB,KAAI,CAACQ,eAArB;AACA;AACD;AACF;;AAEDQ,cAAM,CAACL,GAAG,CAACO,SAAL,CAAN;AAED;AAEF,KA7BD;;AA+BAlB,sBAAY,UAACC,CAAD,EAAuC;AAGjD,UAAIA,CAAC,CAACoB,OAAF,KAAc,EAAlB,EAAsB;AACpBpB,SAAC,CAACC,cAAF;;AACAF,aAAI,CAACsB,aAAL;;AACA;AACD;;AAGO;;AACR,UAAMC,KAAK,GAAGvB,KAAI,CAACS,QAAL,EAAd;;AACA,UAAIe,iBAAiB,IAAIvB,CAAC,CAACoB,OAAF,KAAc,CAAnC,IAAwCE,KAAK,KAAK,EAAtD,EAA0D;AACxDvB,aAAI,CAACiB,OAAL,GAAe,IAAf;;AACAjB,aAAI,CAACY,KAAL,CAAWO,MAAX;;AACAnB,aAAI,CAACsB,aAAL;;AACA;AACD;AAEF,KAnBD;;AAqBAtB,qBAAW;AACT,UAAMW,GAAG,GAAGX,KAAI,CAACyB,MAAL,EAAZ;;AACA,aAAOd,GAAG,GAAGA,GAAG,CAACO,SAAP,GAAmB,EAA7B;AACD,KAHD;;AAKAlB,mBAAS;AACP,aAAOA,KAAI,CAACY,KAAL,CAAWC,gBAAX,CAA4BC,OAAnC;AACD,KAFD;;AAIAd,0BAAgB;AACN;;AACR,UAAI0B,QAAQ,IAAIA,QAAQ,CAACZ,OAAzB,EAAkC;AAChCY,gBAAQ,CAACZ,OAAT,CAAiBa,KAAjB;AACD;AACF,KALD;;;AAuBD;;AA1GCC;AACE,SAAKpB,eAAL,GAAuB,KAAKC,QAAL,EAAvB;AACD,GAFD;;AA0FAmB;AACQ;AAAA,QAAEL,gBAAF;AAAA,QAASM,wBAAT;AAAA,QAAoBhB,sCAApB;AACN,WACEhB;AACEc,SAAG,EAAEE,gBADP;AAEEgB,eAAS,EAAEA,SAFb;AAGEC,qBAAe,EAAE,IAHnB;AAIEC,aAAO,EAAE,KAAKA,OAJhB;AAKEC,aAAO,EAAE,KAAKA,OALhB;AAMEC,YAAM,EAAE,KAAKA,MANf;AAOEC,eAAS,EAAE,KAAKA,SAPlB;AAQEC,6BAAuB,EAAE;AAAEC,cAAM,EAAEtC,cAAc,CAACyB,KAAD;AAAxB;AAR3B,MADF;AAYD,GAdD;;AAgBF;AAAC,CArHD,CAAqC1B,KAAK,CAACwC,SAA3C","names":["React","safeHtmlString","__extends","_this","e","preventDefault","text","clipboardData","getData","document","execCommand","preFocusedValue","getValue","focused","ref","props","innerEditableRef","current","validator","change","removed","innerText","remove","valid","keyCode","focusInputRef","value","removeOnBackspace","getRef","inputRef","focus","ContentEditable","className","contentEditable","onPaste","onFocus","onBlur","onKeyDown","dangerouslySetInnerHTML","__html","Component"],"sourceRoot":"","sources":["../../../src/components/ContentEditable.tsx"],"sourcesContent":["import React from \"react\";\nimport {safeHtmlString} from \"../utils/functions\";\n\ninterface Props {\n  value: string;\n  className: string;\n  innerEditableRef: React.RefObject<HTMLDivElement>;\n  inputRef: React.RefObject<HTMLInputElement>;\n  change: (value: string) => void;\n  remove: () => void;\n  validator?: (value: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class ContentEditable extends React.Component<Props> {\n\n  // Track focus state of editable tag\n  focused: boolean = false;\n\n  // Track if element has been removed from DOM\n  removed: boolean = false;\n\n  // Save value before input is focused / user starts typing\n  preFocusedValue: string = \"\";\n\n  componentDidMount() {\n    this.preFocusedValue = this.getValue();\n  }\n\n  onPaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n\n    // Cancel paste event\n    e.preventDefault();\n\n    // Remove formatting from clipboard contents\n    const text = e.clipboardData.getData(\"text/plain\");\n\n    // Insert text manually from paste command\n    document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n\n  }\n\n  onFocus = () => {\n    this.preFocusedValue = this.getValue();\n    this.focused = true;\n  }\n\n  onBlur = () => {\n\n    this.focused = false;\n\n    const ref = this.props.innerEditableRef.current;\n    const { validator, change } = this.props;\n\n    if (!this.removed && ref) {\n\n      // On blur, if no content in tag, remove it\n      if (ref.innerText === \"\") {\n        this.props.remove();\n        return;\n      }\n\n      // Validate input if needed\n      if (validator) {\n        const valid = validator(this.getValue());\n        // If invalidate, switch ref back to pre focused value\n        if (!valid) {\n          ref.innerText = this.preFocusedValue;\n          return;\n        }\n      }\n\n      change(ref.innerText);\n\n    }\n\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\n    // On enter, focus main tag input\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      this.focusInputRef();\n      return;\n    }\n\n    // On backspace, if no content in ref, remove tag and focus main tag input\n    const { removeOnBackspace } = this.props;\n    const value = this.getValue();\n    if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n      this.removed = true;\n      this.props.remove();\n      this.focusInputRef();\n      return;\n    }\n\n  }\n\n  getValue = () => {\n    const ref = this.getRef();\n    return ref ? ref.innerText : \"\";\n  }\n\n  getRef = () => {\n    return this.props.innerEditableRef.current;\n  }\n\n  focusInputRef = () => {\n    const { inputRef } = this.props;\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const { value, className, innerEditableRef } = this.props;\n    return (\n      <div\n        ref={innerEditableRef}\n        className={className}\n        contentEditable={true}\n        onPaste={this.onPaste}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyDown={this.onKeyDown}\n        dangerouslySetInnerHTML={{ __html: safeHtmlString(value) }}\n      />\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}